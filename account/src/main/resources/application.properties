#>>>>> Profile
spring.application.name              = account
spring.profiles.active               = ${SPRING_PROFILE_ACTIVE:dev}
server.port                          = 8080

#>>>>> Cloud Config
spring.config.import                 = optional:${SPRING_CONFIG_IMPORT:configserver:http://localhost:8071}

#>>>>> MONGO
spring.data.mongodb.database          = account
spring.data.mongodb.port              = 27017
spring.data.mongodb.host              = ${MONGODB_HOST_NAME:localhost}

#>>>>> H2
#spring.datasource.url                = jdbc:h2:mem:testdb
#spring.datasource.driverClassName    = org.h2.Driver
#spring.datasource.username           = sa
#spring.datasource.password           =

#>>>>> POSTGRES
#spring.datasource.url= jdbc:postgresql://account-db:5432/account_service
#spring.datasource.url= jdbc:postgresql://locahost:5432/account_service
#spring.datasource.username= account
#spring.datasource.password= account123

#>>>>> JPA
spring.jpa.database-platform         = org.hibernate.dialect.H2Dialect
spring.h2.console.enabled            = true
spring.jpa.hibernate.ddl-auto        = update
spring.jpa.show-sql                  = true

#>>>>> Eureka Server
eureka.instance.preferIpAddress      = true
eureka.client.registerWithEureka     = true
eureka.client.fetchRegistry          = true
eureka.client.serviceUrl.defaultZone = ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:9000/eureka/}


#>>>>> READINESS and LIVENESS
management.health.livenessstate.enabled   = true
management.health.readinessstate.enabled  = true
management.endpoint.health.probes.enabled = true

#>>>>> Actuator
info.app.name                              = Account Service
info.app.description                       = Account Service Version 1
info.app.version                           = 1.0.0 (get from pom)
management.info.env.enabled                = true
management.endpoint.shutdown.enabled       = true
management.endpoints.web.exposure.include  = *
management.endpoint.health.show-details    = always


#>>>>> Circuit Breaker
# Register to Actuator
resilience4j.circuitbreaker.configs.default.registerHealthIndicator= true
# Threshold
resilience4j.circuitbreaker.instances.CustomerDetailSupport.minimumNumberOfCalls= 5
# Rate Limit 50%
resilience4j.circuitbreaker.instances.CustomerDetailSupport.failureRateThreshold= 50
# Time to check and update status
resilience4j.circuitbreaker.instances.CustomerDetailSupport.waitDurationInOpenState= 30000
# Threshold after OPEN
resilience4j.circuitbreaker.instances.CustomerDetailSupport.permittedNumberOfCallsInHalfOpenState=2

#>>>>> Retry
resilience4j.retry.configs.default.registerHealthIndicator        = true
resilience4j.retry.instances.retryCustomerDetail.maxRetryAttempts = 3
resilience4j.retry.instances.retryCustomerDetail.waitDuration     = 2000

#>>>>> Rate Limit
resilience4j.ratelimiter.configs.default.registerHealthIndicator        = true
resilience4j.ratelimiter.instances.greetingRateLimit.timeoutDuration    =10000
resilience4j.ratelimiter.instances.greetingRateLimit.limitRefreshPeriod =10000
resilience4j.ratelimiter.instances.greetingRateLimit.limitForPeriod     =1

#>>>>> Rabbit MQ
spring.cloud.bus.enabled  = true
spring.rabbitmq.host      = localhost
spring.rabbitmq.port      = 5672
spring.rabbitmq.username  = guest
spring.rabbitmq.password  = guest

#>>>>> Prometheus
management.metrics.tags.application: ${spring.application.name}

#>>>>> LOG
logging.level.com.example.package.path.to.your.FeignClient=DEBUG
logging.level.feign=DEBUG

logging.level.com.piseth.bank.account=DEBUG
logging.pattern.level= "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"


#>>>>> TRACING
## For OTLP - OTLP Prometheus endpoint, OTLP requires pushing
#management.otlp.metrics.export.url=http://localhost:9090/api/v1/otlp/v1/metrics
## only for demo purposes
#management.otlp.metrics.export.step=2s
## All traces should be sent to latency analysis tool
#management.tracing.sampling.probability=1.0
## OTLP endpoint - OTLP Tempo endpoint
#management.zipkin.tracing.endpoint=http://localhost:4318/v1/traces
#management.zipkin.tracing.encoding=PROTO3
## For Exemplars to work we need histogram buckets - TODO: Micrometer OTLP doesn't yet support exemplars
#management.metrics.distribution.percentiles-histogram.http.client.requests=true
