services:

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.4
    container_name: keycloak
    ports:
      - "9080:8080"
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
    command: "start-dev"
    extends:
      file: common.yml
      service: com-network
      start_period: 10s
    

  # RABBITMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common.yml
      service: com-network

  # POSTGRES
  posgres-db:
    image: postgres
    container_name: posgres-db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=
      - POSTGRES_DB=loan
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - '5432:5432'
    volumes:
      - loan_data:/var/lib/postgresql/data
    extends:
      file: common.yml
      service: com-network

  # MONGO    
  mongo-db:
    image: mongo:5.0
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGODB_INITDB_ROOT_USERNAME=user
      - MONGODB_INITDB_ROOT_PASSWORD=pass
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s       # Check every 10 seconds
      timeout: 5s         # Timeout if the check takes longer than 5 seconds
      retries: 3          # Mark as unhealthy after 3 failed checks
      start_period: 30s   # Wait 30 seconds before starting health checks
    extends:
      file: common.yml
      service: com-network

  # CONFIG SERVER
  configserver:
    image: kimhakseang/configserver:v2
    container_name: configserver
    restart: on-failure
    healthcheck:
      test: "curl --fail --silent http://localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    ports:
      - "8071:8071"
    extends:
      file: common.yml
      service: com-rabbit
    environment:
      SPRING_APPLICATION_NAME: "configserver"
      OTEL_SERVICE_NAME: "configserver"

  # EUREKA SERVER
  eurekaserver:
    image: kimhakseang/eurekaserver:v2
    healthcheck:
      test: "curl --fail --silent http://localhost:9000/actuator/health/readiness | grep UP || exit 1"
    ports:
      - "9001:9000"
    extends:
      file: common.yml
      service: com-configserver
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"

  # GATEWAY SERVER
  gateway-ms:
    image: kimhakseang/gatewayserver:v2
    ports:
      - "8072:8072"
    extends:
      file: common.yml
      service: com-eurekaserver
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      OTEL_SERVICE_NAME: "gatewayserver"
      JAVA_TOOL_OPTIONS: "-javaagent:/app/libs/opentelemetry-javaagent-1.27.0.jar"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4317
      OTEL_METRICS_EXPORTER: none
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: "http://keycloak:8080/realms/master/protocol/openid-connect/certs"

  # ACCOUNT 
  account:
    image: kimhakseang/account_service:v2
    ports:
      - "8080:8080"
    depends_on:
      mongo-db:
        condition: service_healthy
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_DATA_MONGODB_HOST: mongo-db
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: account
      SPRING_APPLICATION_NAME: "account"
      OTEL_SERVICE_NAME: "account"
    extends:
      file: common.yml
      service: com-eurekaserver

  # LOAN ONE
  loan:
    image: kimhakseang/loan:v2
    ports:
      - "8095:8095"
      # - "6000:8095"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://posgres-db:5432/loan
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PWD:
      SPRING_APPLICATION_NAME: "loan"
      OTEL_SERVICE_NAME: "loan"
    extends:
      file: common.yml
      service: com-eurekaserver

  # LOAN TWO
  loan-two:
    image: kimhakseang/loan:v2
    ports:
      - "6000:8095"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://posgres-db:5432/loan
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PWD:
      SPRING_APPLICATION_NAME: "loan"
      OTEL_SERVICE_NAME: "loan"
    extends:
      file: common.yml
      service: com-eurekaserver

  #---------------------------------------------------------
  #-------------------EXTERNAL SERVICE----------------------
  #---------------------------------------------------------

  # READ
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../../Observability/Loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      learn_network:
        aliases:
          - loki

  # WRITE
  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../../Observability/Loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  # ALLOY
  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../../Observability/Alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common.yml
      service: com-network

  # MiniO
  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common.yml
      service: com-network
      
  # TEMPO
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3200:3100"
      - "4317:4317"
    volumes:
      - ../../Observability/Tempo/tempo.yml:/etc/tempo-config.yml
    # environment:
    #   - OTEL_EXPORTER_OTLP_ENDPOINT=http://tempo:4317
    extends:
      file: common.yml
      service: com-network

  # GRAFANA
  grafana:
    image: grafana/grafana:latest
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://gateway:3100
            jsonData:
              httpHeaderName1: "X-Scope-OrgID"
            secureJsonData:
              httpHeaderValue1: "tenant1"
        EOF
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../../Observability/Grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common.yml
      service: com-network
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:587
      - GF_SMTP_USER=tthyu83@gmail.com
      - GF_SMTP_PASSWORD=fdtv ikwf uiut vzrn
      - GF_SMTP_FROM_ADDRESS=kimhakseang@example.com
      - GF_SMTP_FROM_NAME=Grafana-Alert
      - GF_SMTP_STARTTLS_POLICY=Yes

  
  # PROMETHEUS
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../Observability/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common.yml
      service: com-network

  # Backend
  backend:
    image: grafana/loki:latest
    volumes:
      - ../../Observability/Loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common.yml
      service: com-network
    
  # Grafana Gateway
  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common.yml
      service: com-network

networks:
  learn_network:
  # dev_learn_network:
volumes:
  loan_data:
