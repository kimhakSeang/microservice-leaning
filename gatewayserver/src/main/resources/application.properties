spring.application.name                  = gatewayserver

management.endpoint.shutdown.enabled     = true
management.endpoints.web.exposure.include=*

# Gateway
management.info.env.enabled              = true
management.endpoint.gateway.enabled      = true
spring.cloud.gateway.discovery.locator.enabled            = true
spring.cloud.gateway.discovery.locator.lowerCaseServiceId = true

# Eureka Server
eureka.instance.preferIpAddress      = true
eureka.client.registerWithEureka     = true
eureka.client.fetchRegistry          = true
eureka.client.serviceUrl.defaultZone = ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:9001/eureka}

# Profile
spring.profiles.active               = ${SPRING_PROFILE_ACTIVE:prod}
spring.config.import                 = ${SPRING_CONFIG_IMPORT:configserver:http://localhost:8071}

#LOG
#logging.level.com.gateway.app                   = DEBUG
#logging.level.org.springframework.cloud.gateway = DEBUG
#logging.level.reactor.netty.http.client         = DEBUG

management.metrics.tags.application= ${spring.application.name}

spring.devtools.restart.enabled=true

logging.level.com.gateway.app=DEBUG
logging.pattern.level= "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

#>>> TRACING
## For OTLP - OTLP Prometheus endpoint, OTLP requires pushing
#management.otlp.metrics.export.url=http://localhost:9090/api/v1/otlp/v1/metrics
## only for demo purposes
#management.otlp.metrics.export.step=2s
## All traces should be sent to latency analysis tool
#management.tracing.sampling.probability=1.0
## OTLP endpoint - OTLP Tempo endpoint
#management.zipkin.tracing.endpoint=http://localhost:4318/v1/traces
#management.zipkin.tracing.encoding=PROTO3
## For Exemplars to work we need histogram buckets - TODO: Micrometer OTLP doesn't yet support exemplars
#management.metrics.distribution.percentiles-histogram.http.client.requests=true


# OAUTH2 & KEYCLOAK
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:9080/realms/master/protocol/openid-connect/certs
